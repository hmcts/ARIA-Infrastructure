variables:
  - group: DatabricksSecrets
  - name: shouldBuildWheel
    value: 'true'
  - name: mainRepositoryName
    value: '$(Build.SourcesDirectory)/01-Sandbox'
  - name: pythonVersion
    value: '3.9'
  - name: subscriptionEndPoint
    value: 'test_python_installation' 
  - name: wheelFile
    value: "$(Pipeline.Workspace)/ARIAFUNCITONS-0.0.1-py3-none-any.whl"
  - name: wheelName
    value: 'ARIAFUNCITONS-0.0.1-py3-none-any.whl'
  - name: workspacePath
    value: 'dbfs:/FileStore/shared_wheels/'

stages:
- stage: Build
  displayName: 'Build Wheel Package'
  jobs:
  - job: BuildWheelPackage
    displayName: 'Build Python Wheel'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '3.x'
        addToPath: true
        architecture: 'x64'

    - script: |
        python --version
        pip install --upgrade pip
        pip install build
        python -m build --wheel --outdir $(mainRepositoryName)/Databricks/SharedFunctionsLib/dist \
          $(mainRepositoryName)/Databricks/SharedFunctionsLib

        ls -la $(mainRepositoryName)/Databricks/SharedFunctionsLib/dist

      displayName: 'Install Python dependencies & build Python wheel'

    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.SourcesDirectory)/01-Sandbox/Databricks/SharedFunctionsLib/dist'
        ArtifactName: 'ariafunction'
        publishLocation: 'Container'
      displayName: 'Publish Wheel Artifact'

- stage: Deploy
  displayName: 'Deploy to Databricks'
  dependsOn: Build
  jobs:
  - job: DeployToDatabricks
    displayName: 'Deploy to Databricks'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: DownloadBuildArtifacts@1
      inputs:
        buildType: 'current'
        downloadType: 'single'
        artifactName: 'ariafunction'
        downloadPath: '$(Pipeline.Workspace)'
      displayName: 'Download wheel Artifact'
    
    - script: |
        echo "Contents of Artifact Staging Directory:"
        find '$(Pipeline.Workspace)' -type f | sort
        echo "-----"
        find '$(Pipeline.Workspace)' -name "*.whl"
        echo "-----"
        ls -la '$(Pipeline.Workspace)'
      displayName: 'List contents of Artifact Staging Directory'

    - task: UsePythonVersion@0
      inputs:
        versionSpec: '3.x'
        addToPath: true
        architecture: 'x64'
    
    - script: |
        pip install databricks-cli --upgrade
      displayName: 'Install Databricks CLI'
    
    - script: |
        echo "[DEFAULT]" > ~/.databrickscfg
        echo "host = $(databricksInstance)" >> ~/.databrickscfg
        echo "token = $(databricksPAT)" >> ~/.databrickscfg
      displayName: 'Configure Databricks CLI'

    - script: |
        # Clean old .whl files
        rm -rf $(Pipeline.Workspace)/Databricks/SharedFunctionsLib/dist/*.whl

        # Build the wheel
        python -m build --wheel --outdir $(Pipeline.Workspace)/Databricks/SharedFunctionsLib/dist $(Pipeline.Workspace)/Databricks/SharedFunctionsLib

        # Find only lowercase .whl files
        WHEEL_FILE=$(find '$(Pipeline.Workspace)' -type f -iname "ariafuncitons*.whl" | head -n 1)

        if [ -n "$WHEEL_FILE" ]; then
            echo "Found lowercase wheel file: $WHEEL_FILE"

            # Upload to DBFS
            DEST_PATH="/dbfs/FileStore/shared_wheels/$(basename $WHEEL_FILE)"
            databricks fs cp "$WHEEL_FILE" "$DEST_PATH" --overwrite --debug

            # Install on the Databricks cluster
            databricks libraries install --cluster-id $(databricksClusterId) --whl "$DEST_PATH"
        else
            echo "No lowercase .whl file found"
            exit 1
        fi
      displayName: 'Build and Install Python Wheel to Databricks'
      
    - script: |
       WHEEL_FILENAME=$(basename $(find "$(Pipeline.Workspace)" -name "*.whl" | head -n 1))
       if [ -z "$WHEEL_FILENAME" ]; then
         echo "Error: No .whl file found in $(Pipeline.Workspace)"
         exit 1
       fi
       echo "Installing wheel: $WHEEL_FILENAME on cluster ID: $(databricksClusterId)"
       databricks libraries install --cluster-id $(databricksClusterId) --whl "$(workspacePath)/$WHEEL_FILENAME"
      displayName: 'Install Wheel on Databricks Cluster'